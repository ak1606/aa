import java.util.*;

public class TSPCrossoverDemo {

    // Function to perform Order Crossover (OX)
    public static int[] orderCrossover(int[] parent1, int[] parent2) {
        int length = parent1.length;
        int[] child = new int[length];
        Arrays.fill(child, -1); // Initialize child with -1 (indicating empty)

        // Randomly select a segment to copy from parent1
        Random random = new Random();
        int start = random.nextInt(length);
        int end = random.nextInt(length);

        if (start > end) {
            int temp = start;
            start = end;
            end = temp;
        }

        // Copy the segment from parent1 to child
        for (int i = start; i <= end; i++) {
            child[i] = parent1[i];
        }

        // Fill the rest from parent2
        int currentIndex = (end + 1) % length;
        for (int i = 0; i < length; i++) {
            int value = parent2[(end + 1 + i) % length];
            if (!contains(child, value)) {
                child[currentIndex] = value;
                currentIndex = (currentIndex + 1) % length;
            }
        }

        return child;
    }

    // Helper function to check if a value is already in the array
    public static boolean contains(int[] array, int value) {
        for (int num : array) {
            if (num == value) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        // Example parent chromosomes
        int[] parent1 = {1, 2, 3, 4, 5, 6, 7};
        int[] parent2 = {4, 5, 6, 7, 1, 2, 3};

        // Perform crossover
        int[] child = orderCrossover(parent1, parent2);

        // Print parents and child
        System.out.println("Parent 1: " + Arrays.toString(parent1));
        System.out.println("Parent 2: " + Arrays.toString(parent2));
        System.out.println("Child   : " + Arrays.toString(child));
    }
}
